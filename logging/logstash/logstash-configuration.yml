---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configuration
data:
  logstash.conf: |-
    input {
      beats {
        port => 5044
        tags => [ "input:beats" ]
      }
    }

    filter {

      # log4j JSON parsing
      if [kubernetes][annotations][org_o12stack/logs_hint] == "log4j-json" {
        mutate {
          add_field => {
            # disambiguation: 'level' is later overwritten by Graylog's gelf input
            "log_level" => "%{[level]}"
          }
          add_tag => [ "log4j-json-parsed" ]
        }
      }

      mutate {
        # remove unnecessary fields    
        remove_field => [ "[agent]", "[ecs][version]", "[input][type]", "[log]" ]
        # clean up kubernetes metadata
        rename => { "[kubernetes][node][name]" => "[kubernetes][node]" } 
        rename => { "[kubernetes][container][name]" => "[kubernetes][container]" }
        rename => { "[kubernetes][replicaset][name]" => "[kubernetes][replicaset]"} 
        rename => { "[kubernetes][pod][name]" => "[kubernetes][pod]" }
      }

      # parse access log
      if [kubernetes][annotations][org_o12stack/logs_hint] == "access-log" {
        grok {
          match => { "message" => "^%{COMMONAPACHELOG}$" }
          tag_on_failure => [ "access-log-parsing-error" ]
          add_tag => [ "access-log-parsed" ]
          overwrite => [ "clientip", "ident", "auth", "timestamp", "verb", "request", "httpversion", "response", "bytes", "referrer", "agent" ]
        }
      }

      # geoip stuff
      if [clientip] {
        
        # resolve clientip -> geoip information
        http {
          url => "http://geoip:8080/%{clientip}"
          target_body => "geoip"
          target_headers => "geoipheaders"
        }

        # put coords in a single field for map view in Graylog e.a.
        if [geoip][latitude] and [geoip][longitude] {
          mutate {
            add_field => { "[geoip][coords]" => "%{[geoip][latitude]},%{[geoip][longitude]}" }
            remove_field => [ "[geoip][latitude]", "[geoip][longitude]" ]
          }
        }

        # cleanup http response headers
        if [geoipheaders] {
          mutate {
            remove_field => [ "[geoipheaders]" ]
          }
        }
      }

      
    }
    
    output {
      gelf {
            host => "graylog"
            port => "12201"
            sender => "%{[kubernetes][pod]}"
            protocol => "TCP"
      }
    }
